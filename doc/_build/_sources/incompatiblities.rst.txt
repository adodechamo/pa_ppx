========================================================================
Incompatibilities Between `pa_ppx` PPX Rewriters and the "standard" ones
========================================================================

As much as possible, we've tried to ensure that `pa_ppx`
implementations of PPX rewriters stay faithful to the behaviour of the
ones we've reverse-engineered.  There are some places where this was
either not easy, or where deviation was valuable, and I'll try to
document them here.

`pa_ppx.import`
===============

`pa_ppx.import` has a few incompatibilites with `ppx_import` (as we
understand its behaviour) and a bunch of extra features.

Incompatibilities
-----------------

Automatic renaming during import of recursive types
###################################################

When `ppx_import` imports a type, viz.::

   type longident = [%import Longident.t]

it automatically renames the instances of `t` in the body of the
type-definition.  But if the *intent* of the import was to reuse that
type-definition and modify it somehow (for instance, to introduce an
intermediary type for the purpose of hash-consing) then this is
defeated by this automatic renaming.  Furthermore, there is an
*extension* in `pa_ppx.import` to import entire typedecl-groups, that
can be used to get this same behaviour::

  [%%import Longident.t]

though admittedly, it doesn't rename the members of the group.

Here's an example of a behaviour

.. container:: trailer
