#!/usr/bin/env perl

use strict ;
use IPC::System::Simple qw(systemx runx capturex $EXITVAL);
use String::ShellQuote ;
use File::Basename;

our $verbose = 1;

{
  my @exes = () ;
  while (-x $ARGV[0]) { push(@exes, shift @ARGV) ; }
  foreach my $exe (@exes) {
    die "$exe does not exist" unless -x $exe ;
  } 
  my @rc ;
  foreach my $exe (@exes) {
    my $rc = runtest($exe, @ARGV) ;
    push(@rc, $rc) ;
  }
  foreach my $rc (@rc) {
    if ($rc) { exit(1) ; }
  } 
  exit(0) ;
}

sub runtest {
  my $test = shift ;
  my $lib = shift ;
  my @args = @_;

  my $src ;
  if ($test =~ /(.*)\.ppx\.byte$/) {
    $src = "$1.ml" ;
  }
  elsif ($test =~ /(.*)\.pa\.byte$/) {
    $src = "$1.ml" ;
  }
  else { die "malformed test $test"; }

  my $corr = "$src.corrected" ;
  v_systemx([0], ["rm","-f",$corr]);
  my $rc = v_systemx([0,1,2], ["./$test", "inline-test-runner", $lib,
			       "-source-tree-root", ".",
			       "-diff-cmd", "-",
			       @args]);
  if ($rc > 0 || -r $corr) {
    if (-r $corr) {
      v_systemx([0,1], ["git", "--no-pager", "diff", "--no-index", "-u", $src, $corr]);
    }
    else {
      die "test failed but no $corr file present" ;
    }
  }
  return $rc;
}

sub v_systemx {
  croak( "v_systemx: must specify exit codes") unless (ref($_[0]) eq 'ARRAY') ;
  my $codes = shift ;
  my @cmd = @{ shift @_ } ;
  my %args = @_ ;

  print STDERR join(' ', map { shell_quote($_) } @cmd)."\n" if $main::verbose ;

  return runx($codes, @cmd) ;
}

